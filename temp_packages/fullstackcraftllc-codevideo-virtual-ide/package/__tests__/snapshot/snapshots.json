[
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": []
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "",
        "caretPosition": {
          "row": 1,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "Hi everyone! Today I wanted to make this video to showcase the powers of my codevideo framework with a much more complex example.",
    "editors": [
      {
        "filename": "main.rs",
        "content": "",
        "caretPosition": {
          "row": 1,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "We'll be exploring an elegant solution in Rust that demonstrates the power of recursion combined with memoization.",
    "editors": [
      {
        "filename": "main.rs",
        "content": "",
        "caretPosition": {
          "row": 1,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "This particular problem was from day 11 of 2024's Advent of Code - the challenge that came out on December 11th, 2024.",
    "editors": [
      {
        "filename": "main.rs",
        "content": "",
        "caretPosition": {
          "row": 1,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "Let's start by looking at the problem. We need to simulate some strange stones that change every time we blink...",
    "editors": [
      {
        "filename": "main.rs",
        "content": "",
        "caretPosition": {
          "row": 1,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1",
        "caretPosition": {
          "row": 1,
          "col": 54
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\n",
        "caretPosition": {
          "row": 2,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {",
        "caretPosition": {
          "row": 2,
          "col": 59
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n",
        "caretPosition": {
          "row": 3,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();",
        "caretPosition": {
          "row": 3,
          "col": 37
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n",
        "caretPosition": {
          "row": 5,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {",
        "caretPosition": {
          "row": 5,
          "col": 36
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n",
        "caretPosition": {
          "row": 6,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "The rules are pretty straightforward. For each stone, we need to check three conditions...",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n",
        "caretPosition": {
          "row": 6,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {",
        "caretPosition": {
          "row": 6,
          "col": 24
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n",
        "caretPosition": {
          "row": 7,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1",
        "caretPosition": {
          "row": 7,
          "col": 63
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n",
        "caretPosition": {
          "row": 8,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);",
        "caretPosition": {
          "row": 8,
          "col": 32
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n",
        "caretPosition": {
          "row": 9,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {",
        "caretPosition": {
          "row": 9,
          "col": 17
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "So here it's pretty straightforward, if the stone is engraved with 0 it becomes engraved with a 1",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {",
        "caretPosition": {
          "row": 9,
          "col": 17
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n",
        "caretPosition": {
          "row": 10,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();",
        "caretPosition": {
          "row": 10,
          "col": 47
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n",
        "caretPosition": {
          "row": 11,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();",
        "caretPosition": {
          "row": 11,
          "col": 45
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n",
        "caretPosition": {
          "row": 13,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {",
        "caretPosition": {
          "row": 13,
          "col": 36
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n",
        "caretPosition": {
          "row": 14,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones",
        "caretPosition": {
          "row": 14,
          "col": 49
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n",
        "caretPosition": {
          "row": 15,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;",
        "caretPosition": {
          "row": 15,
          "col": 42
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n",
        "caretPosition": {
          "row": 16,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();",
        "caretPosition": {
          "row": 16,
          "col": 77
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n",
        "caretPosition": {
          "row": 17,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();",
        "caretPosition": {
          "row": 17,
          "col": 77
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n",
        "caretPosition": {
          "row": 19,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);",
        "caretPosition": {
          "row": 19,
          "col": 45
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n",
        "caretPosition": {
          "row": 20,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);",
        "caretPosition": {
          "row": 20,
          "col": 46
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n",
        "caretPosition": {
          "row": 21,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "And for this else block, if a stone has an even number of digits, we split it in two where the \"left\" stone becomes the first half of the original stone, and the right stone becomes the \"right\" half of the original stone.",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n",
        "caretPosition": {
          "row": 21,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {",
        "caretPosition": {
          "row": 21,
          "col": 21
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n",
        "caretPosition": {
          "row": 22,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024",
        "caretPosition": {
          "row": 22,
          "col": 44
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n",
        "caretPosition": {
          "row": 23,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);",
        "caretPosition": {
          "row": 23,
          "col": 47
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n",
        "caretPosition": {
          "row": 24,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }",
        "caretPosition": {
          "row": 24,
          "col": 14
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "And finally, if none of the other rules applied, we multiply the stone by 2024",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }",
        "caretPosition": {
          "row": 24,
          "col": 14
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n",
        "caretPosition": {
          "row": 25,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }",
        "caretPosition": {
          "row": 25,
          "col": 10
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n",
        "caretPosition": {
          "row": 26,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }",
        "caretPosition": {
          "row": 26,
          "col": 6
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n",
        "caretPosition": {
          "row": 28,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones",
        "caretPosition": {
          "row": 28,
          "col": 15
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "And then of course we return the new stones.",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones",
        "caretPosition": {
          "row": 28,
          "col": 15
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n",
        "caretPosition": {
          "row": 29,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}",
        "caretPosition": {
          "row": 29,
          "col": 2
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "This naive implementation works fine for Part 1, where we only need to blink 25 times. Lets set up a part 1 function and run it.",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}",
        "caretPosition": {
          "row": 29,
          "col": 2
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\n",
        "caretPosition": {
          "row": 31,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {",
        "caretPosition": {
          "row": 31,
          "col": 47
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n",
        "caretPosition": {
          "row": 32,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;",
        "caretPosition": {
          "row": 32,
          "col": 71
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "We'll read in the single line puzzle input as an array.",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;",
        "caretPosition": {
          "row": 32,
          "col": 71
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n",
        "caretPosition": {
          "row": 34,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();",
        "caretPosition": {
          "row": 34,
          "col": 91
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "Then convert that first array to a vec of 64 byte integers.",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();",
        "caretPosition": {
          "row": 34,
          "col": 91
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n",
        "caretPosition": {
          "row": 36,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();",
        "caretPosition": {
          "row": 36,
          "col": 65
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "We'll make a mutable clone of the initial stone engravings.",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();",
        "caretPosition": {
          "row": 36,
          "col": 65
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n",
        "caretPosition": {
          "row": 37,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {",
        "caretPosition": {
          "row": 37,
          "col": 21
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n",
        "caretPosition": {
          "row": 38,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);",
        "caretPosition": {
          "row": 38,
          "col": 60
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n",
        "caretPosition": {
          "row": 39,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }",
        "caretPosition": {
          "row": 39,
          "col": 6
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n",
        "caretPosition": {
          "row": 40,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "And then we can execute the blink 25 times!",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n",
        "caretPosition": {
          "row": 40,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "We can then finally log out the solution.",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n",
        "caretPosition": {
          "row": 40,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());",
        "caretPosition": {
          "row": 40,
          "col": 77
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n",
        "caretPosition": {
          "row": 41,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())",
        "caretPosition": {
          "row": 41,
          "col": 11
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n",
        "caretPosition": {
          "row": 42,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 42,
          "col": 2
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "Now, we could have just pasted in the puzzle input directly and converted to an array, but that's not so elegant, so let's go up to the top of the file and implement this read lines as int arrays function.",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 42,
          "col": 2
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 1,
          "col": 2
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 1,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 4,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 1,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "We need to import from fs, io, and path libraries.",
    "editors": [
      {
        "filename": "main.rs",
        "content": "\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 1,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 1,
          "col": 19
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 2,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 2,
          "col": 41
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 3,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 3,
          "col": 21
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 5,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "We'll start by importing the necessary modules. We need File for opening files, io utilities for buffered reading, and Path for handling file paths.",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 5,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 5,
          "col": 84
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 6,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 6,
          "col": 6
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 7,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 7,
          "col": 20
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 8,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 8,
          "col": 2
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "Our function will be generic over any type P that can be referenced as a Path. This gives us flexibility in what types of path arguments we can accept.",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 8,
          "col": 2
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 9,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 9,
          "col": 38
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "We open the file using the question mark operator, which will return early with an error if the file can't be opened.",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 9,
          "col": 38
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 10,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 10,
          "col": 39
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "We wrap the file in a BufReader for efficient reading. This gives us buffered reading capabilities which are much more efficient than reading one byte at a time.",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 10,
          "col": 39
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 11,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 11,
          "col": 74
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "We collect all lines into a vector. Note that each line is actually a Result, since reading can fail at any point.",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 11,
          "col": 74
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 12,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 12,
          "col": 52
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "We'll create a vector to store our processed integer arrays.",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 12,
          "col": 52
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 13,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 13,
          "col": 81
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 14,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 14,
          "col": 24
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 15,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 15,
          "col": 34
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "For each line, we use the question mark operator to handle any potential reading errors.",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 15,
          "col": 34
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 16,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 16,
          "col": 96
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "We split each line by the separator, then parse each piece into an integer. Note that we're using unwrap here, which means this function will panic if it encounters any non-integer values.",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 16,
          "col": 96
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 17,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 17,
          "col": 36
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 18,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 18,
          "col": 6
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 19,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 19,
          "col": 19
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "Finally, we wrap our vector of integer arrays in Ok and return it.",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 19,
          "col": 19
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 20,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 20,
          "col": 2
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 22,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "We'll create a main function to call the run part one function.",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 22,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 22,
          "col": 12
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 23,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 23,
          "col": 20
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 24,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 24,
          "col": 2
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "And let's run this with cargo run:",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 24,
          "col": 2
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 24,
          "col": 2
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\">cargo run</code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 24,
          "col": 2
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 24,
          "col": 2
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 24,
          "col": 2
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "However, when we try to use this approach for Part 2, which requires 75 blinks, we run into quite a problem. The number of stones grows exponentially the more we blink, and even when I was running this on my own M3 Max Mac, the calculations becomes intractable after around 40 to 45 blinks.",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 24,
          "col": 2
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "It's time we implement a more elegant, optimized, and efficient solution using recursion and memoization.",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 24,
          "col": 2
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 26,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "Let's get started by going to the top of the file and importing the HashMap package. We'll need this to keep track of our memoized stone engravings.",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 26,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 1,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 1,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 2,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 1,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 1,
          "col": 31
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 5,
          "col": 31
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\n\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 7,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\n\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 6,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "We can then define MemoKey and MemoMap types.",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\n\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 6,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 6,
          "col": 65
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\n\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 7,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 7,
          "col": 40
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "The reason we can memoize according to blinks is because the resulting stone from any given stone will always be the same - you can take a given stone, whether it be 0, 1, 2, 3 or whatever - and you immediately know any other stone you see from that point on will have the same exact 'production' of further stones... so to speak.",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 7,
          "col": 40
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}",
        "caretPosition": {
          "row": 74,
          "col": 40
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\n",
        "caretPosition": {
          "row": 75,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "So let's get started with the implementation.",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\n",
        "caretPosition": {
          "row": 75,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {",
        "caretPosition": {
          "row": 75,
          "col": 84
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "This new function will take the current stone engraving we are looking at, the number of blinks we are at, and the memoized map of stone engraving and blinks remaining.",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {",
        "caretPosition": {
          "row": 75,
          "col": 84
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n",
        "caretPosition": {
          "row": 76,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }",
        "caretPosition": {
          "row": 76,
          "col": 33
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n",
        "caretPosition": {
          "row": 78,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);",
        "caretPosition": {
          "row": 78,
          "col": 31
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n",
        "caretPosition": {
          "row": 79,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }",
        "caretPosition": {
          "row": 79,
          "col": 59
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n",
        "caretPosition": {
          "row": 81,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {",
        "caretPosition": {
          "row": 81,
          "col": 33
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "This is where a major optimization gain is - if we've already seen this stone and blinks combo, we can immediately return the count that this number of blinks results in for this stone!",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {",
        "caretPosition": {
          "row": 81,
          "col": 33
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n",
        "caretPosition": {
          "row": 82,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)",
        "caretPosition": {
          "row": 82,
          "col": 52
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n",
        "caretPosition": {
          "row": 83,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {",
        "caretPosition": {
          "row": 83,
          "col": 13
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n",
        "caretPosition": {
          "row": 84,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();",
        "caretPosition": {
          "row": 84,
          "col": 51
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n",
        "caretPosition": {
          "row": 85,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {",
        "caretPosition": {
          "row": 85,
          "col": 34
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n",
        "caretPosition": {
          "row": 86,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();",
        "caretPosition": {
          "row": 86,
          "col": 47
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n",
        "caretPosition": {
          "row": 87,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;",
        "caretPosition": {
          "row": 87,
          "col": 40
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n",
        "caretPosition": {
          "row": 88,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();",
        "caretPosition": {
          "row": 88,
          "col": 66
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n",
        "caretPosition": {
          "row": 89,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();",
        "caretPosition": {
          "row": 89,
          "col": 67
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n",
        "caretPosition": {
          "row": 91,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +",
        "caretPosition": {
          "row": 91,
          "col": 61
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n",
        "caretPosition": {
          "row": 92,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)",
        "caretPosition": {
          "row": 92,
          "col": 60
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n",
        "caretPosition": {
          "row": 93,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {",
        "caretPosition": {
          "row": 93,
          "col": 17
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n",
        "caretPosition": {
          "row": 94,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)",
        "caretPosition": {
          "row": 94,
          "col": 67
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n",
        "caretPosition": {
          "row": 95,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }",
        "caretPosition": {
          "row": 95,
          "col": 10
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n",
        "caretPosition": {
          "row": 96,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };",
        "caretPosition": {
          "row": 96,
          "col": 7
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n",
        "caretPosition": {
          "row": 98,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);",
        "caretPosition": {
          "row": 98,
          "col": 30
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n",
        "caretPosition": {
          "row": 99,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result",
        "caretPosition": {
          "row": 99,
          "col": 11
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n",
        "caretPosition": {
          "row": 100,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}",
        "caretPosition": {
          "row": 100,
          "col": 2
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "Now let's use this optimized solution to solve Part 2 of the challenge...",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}",
        "caretPosition": {
          "row": 100,
          "col": 2
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}",
        "caretPosition": {
          "row": 72,
          "col": 2
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "We'll comment out part one here...",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n    println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}",
        "caretPosition": {
          "row": 72,
          "col": 2
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}",
        "caretPosition": {
          "row": 72,
          "col": 4
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}",
        "caretPosition": {
          "row": 72,
          "col": 79
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}",
        "caretPosition": {
          "row": 73,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}",
        "caretPosition": {
          "row": 73,
          "col": 20
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "And call run part two.",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}",
        "caretPosition": {
          "row": 73,
          "col": 20
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}",
        "caretPosition": {
          "row": 101,
          "col": 20
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "And run part two looks like:",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}",
        "caretPosition": {
          "row": 101,
          "col": 20
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}\n\n",
        "caretPosition": {
          "row": 103,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}\n\npub fn run_part_two() -> std::io::Result<()> {",
        "caretPosition": {
          "row": 103,
          "col": 47
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}\n\npub fn run_part_two() -> std::io::Result<()> {\n",
        "caretPosition": {
          "row": 104,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}\n\npub fn run_part_two() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;",
        "caretPosition": {
          "row": 104,
          "col": 71
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}\n\npub fn run_part_two() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n",
        "caretPosition": {
          "row": 106,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}\n\npub fn run_part_two() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stones: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();",
        "caretPosition": {
          "row": 106,
          "col": 81
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}\n\npub fn run_part_two() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stones: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n",
        "caretPosition": {
          "row": 107,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}\n\npub fn run_part_two() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stones: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n    let blinks = 75;",
        "caretPosition": {
          "row": 107,
          "col": 21
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}\n\npub fn run_part_two() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stones: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n    let blinks = 75;\n\n",
        "caretPosition": {
          "row": 109,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "Here's where further elegance shines through. Instead of simulating each blink step by step, we're going to use our memoized recursive function to calculate the total stones efficiently. We can give our map function the desired number of blinks directly.",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}\n\npub fn run_part_two() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stones: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n    let blinks = 75;\n\n",
        "caretPosition": {
          "row": 109,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}\n\npub fn run_part_two() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stones: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n    let blinks = 75;\n\n    let mut memo = HashMap::new();",
        "caretPosition": {
          "row": 109,
          "col": 35
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}\n\npub fn run_part_two() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stones: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n    let blinks = 75;\n\n    let mut memo = HashMap::new();\n\n",
        "caretPosition": {
          "row": 111,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}\n\npub fn run_part_two() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stones: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n    let blinks = 75;\n\n    let mut memo = HashMap::new();\n\n    let total: usize = initial_stones.iter()",
        "caretPosition": {
          "row": 111,
          "col": 45
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}\n\npub fn run_part_two() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stones: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n    let blinks = 75;\n\n    let mut memo = HashMap::new();\n\n    let total: usize = initial_stones.iter()\n",
        "caretPosition": {
          "row": 112,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}\n\npub fn run_part_two() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stones: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n    let blinks = 75;\n\n    let mut memo = HashMap::new();\n\n    let total: usize = initial_stones.iter()\n        .map(|&stone| {",
        "caretPosition": {
          "row": 112,
          "col": 24
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}\n\npub fn run_part_two() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stones: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n    let blinks = 75;\n\n    let mut memo = HashMap::new();\n\n    let total: usize = initial_stones.iter()\n        .map(|&stone| {\n",
        "caretPosition": {
          "row": 113,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}\n\npub fn run_part_two() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stones: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n    let blinks = 75;\n\n    let mut memo = HashMap::new();\n\n    let total: usize = initial_stones.iter()\n        .map(|&stone| {\n            count_stones_recursive(stone, blinks, &mut memo)",
        "caretPosition": {
          "row": 113,
          "col": 61
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}\n\npub fn run_part_two() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stones: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n    let blinks = 75;\n\n    let mut memo = HashMap::new();\n\n    let total: usize = initial_stones.iter()\n        .map(|&stone| {\n            count_stones_recursive(stone, blinks, &mut memo)\n",
        "caretPosition": {
          "row": 114,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}\n\npub fn run_part_two() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stones: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n    let blinks = 75;\n\n    let mut memo = HashMap::new();\n\n    let total: usize = initial_stones.iter()\n        .map(|&stone| {\n            count_stones_recursive(stone, blinks, &mut memo)\n        })",
        "caretPosition": {
          "row": 114,
          "col": 11
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}\n\npub fn run_part_two() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stones: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n    let blinks = 75;\n\n    let mut memo = HashMap::new();\n\n    let total: usize = initial_stones.iter()\n        .map(|&stone| {\n            count_stones_recursive(stone, blinks, &mut memo)\n        })\n",
        "caretPosition": {
          "row": 115,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}\n\npub fn run_part_two() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stones: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n    let blinks = 75;\n\n    let mut memo = HashMap::new();\n\n    let total: usize = initial_stones.iter()\n        .map(|&stone| {\n            count_stones_recursive(stone, blinks, &mut memo)\n        })\n        .sum();",
        "caretPosition": {
          "row": 115,
          "col": 16
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}\n\npub fn run_part_two() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stones: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n    let blinks = 75;\n\n    let mut memo = HashMap::new();\n\n    let total: usize = initial_stones.iter()\n        .map(|&stone| {\n            count_stones_recursive(stone, blinks, &mut memo)\n        })\n        .sum();\n\n",
        "caretPosition": {
          "row": 117,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}\n\npub fn run_part_two() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stones: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n    let blinks = 75;\n\n    let mut memo = HashMap::new();\n\n    let total: usize = initial_stones.iter()\n        .map(|&stone| {\n            count_stones_recursive(stone, blinks, &mut memo)\n        })\n        .sum();\n\n    println!(\"Total stones after {} blinks: {}\", blinks, total);",
        "caretPosition": {
          "row": 117,
          "col": 65
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}\n\npub fn run_part_two() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stones: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n    let blinks = 75;\n\n    let mut memo = HashMap::new();\n\n    let total: usize = initial_stones.iter()\n        .map(|&stone| {\n            count_stones_recursive(stone, blinks, &mut memo)\n        })\n        .sum();\n\n    println!(\"Total stones after {} blinks: {}\", blinks, total);\n\n",
        "caretPosition": {
          "row": 119,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}\n\npub fn run_part_two() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stones: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n    let blinks = 75;\n\n    let mut memo = HashMap::new();\n\n    let total: usize = initial_stones.iter()\n        .map(|&stone| {\n            count_stones_recursive(stone, blinks, &mut memo)\n        })\n        .sum();\n\n    println!(\"Total stones after {} blinks: {}\", blinks, total);\n\n    Ok(())",
        "caretPosition": {
          "row": 119,
          "col": 11
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}\n\npub fn run_part_two() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stones: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n    let blinks = 75;\n\n    let mut memo = HashMap::new();\n\n    let total: usize = initial_stones.iter()\n        .map(|&stone| {\n            count_stones_recursive(stone, blinks, &mut memo)\n        })\n        .sum();\n\n    println!(\"Total stones after {} blinks: {}\", blinks, total);\n\n    Ok(())\n",
        "caretPosition": {
          "row": 120,
          "col": 1
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}\n\npub fn run_part_two() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stones: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n    let blinks = 75;\n\n    let mut memo = HashMap::new();\n\n    let total: usize = initial_stones.iter()\n        .map(|&stone| {\n            count_stones_recursive(stone, blinks, &mut memo)\n        })\n        .sum();\n\n    println!(\"Total stones after {} blinks: {}\", blinks, total);\n\n    Ok(())\n}",
        "caretPosition": {
          "row": 120,
          "col": 2
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "Now, let's run this optimized solution and see how it performs...",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}\n\npub fn run_part_two() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stones: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n    let blinks = 75;\n\n    let mut memo = HashMap::new();\n\n    let total: usize = initial_stones.iter()\n        .map(|&stone| {\n            count_stones_recursive(stone, blinks, &mut memo)\n        })\n        .sum();\n\n    println!(\"Total stones after {} blinks: {}\", blinks, total);\n\n    Ok(())\n}",
        "caretPosition": {
          "row": 120,
          "col": 2
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "And let's run this with cargo run:",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}\n\npub fn run_part_two() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stones: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n    let blinks = 75;\n\n    let mut memo = HashMap::new();\n\n    let total: usize = initial_stones.iter()\n        .map(|&stone| {\n            count_stones_recursive(stone, blinks, &mut memo)\n        })\n        .sum();\n\n    println!(\"Total stones after {} blinks: {}\", blinks, total);\n\n    Ok(())\n}",
        "caretPosition": {
          "row": 120,
          "col": 2
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}\n\npub fn run_part_two() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stones: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n    let blinks = 75;\n\n    let mut memo = HashMap::new();\n\n    let total: usize = initial_stones.iter()\n        .map(|&stone| {\n            count_stones_recursive(stone, blinks, &mut memo)\n        })\n        .sum();\n\n    println!(\"Total stones after {} blinks: {}\", blinks, total);\n\n    Ok(())\n}",
        "caretPosition": {
          "row": 120,
          "col": 2
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\">cargo run</code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}\n\npub fn run_part_two() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stones: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n    let blinks = 75;\n\n    let mut memo = HashMap::new();\n\n    let total: usize = initial_stones.iter()\n        .map(|&stone| {\n            count_stones_recursive(stone, blinks, &mut memo)\n        })\n        .sum();\n\n    println!(\"Total stones after {} blinks: {}\", blinks, total);\n\n    Ok(())\n}",
        "caretPosition": {
          "row": 120,
          "col": 2
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}\n\npub fn run_part_two() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stones: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n    let blinks = 75;\n\n    let mut memo = HashMap::new();\n\n    let total: usize = initial_stones.iter()\n        .map(|&stone| {\n            count_stones_recursive(stone, blinks, &mut memo)\n        })\n        .sum();\n\n    println!(\"Total stones after {} blinks: {}\", blinks, total);\n\n    Ok(())\n}",
        "caretPosition": {
          "row": 120,
          "col": 2
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "Even with 75 blinks, our memoized solution calculates the result almost instantly! The answer, or rather, the final count of stones, is over 218 trillion! Something that couldn't be done quickly on even the craziest of hardware if done via brute force and storing all the stones in an array like our naive approach in part 1. ",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}\n\npub fn run_part_two() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stones: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n    let blinks = 75;\n\n    let mut memo = HashMap::new();\n\n    let total: usize = initial_stones.iter()\n        .map(|&stone| {\n            count_stones_recursive(stone, blinks, &mut memo)\n        })\n        .sum();\n\n    println!(\"Total stones after {} blinks: {}\", blinks, total);\n\n    Ok(())\n}",
        "caretPosition": {
          "row": 120,
          "col": 2
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "This puzzle is a perfect example of how some smart algorithmic choices can solve problems that would be completely intractable with a naive approach.",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}\n\npub fn run_part_two() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stones: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n    let blinks = 75;\n\n    let mut memo = HashMap::new();\n\n    let total: usize = initial_stones.iter()\n        .map(|&stone| {\n            count_stones_recursive(stone, blinks, &mut memo)\n        })\n        .sum();\n\n    println!(\"Total stones after {} blinks: {}\", blinks, total);\n\n    Ok(())\n}",
        "caretPosition": {
          "row": 120,
          "col": 2
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "Let's quickly review why this solution is so much more efficient...",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}\n\npub fn run_part_two() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stones: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n    let blinks = 75;\n\n    let mut memo = HashMap::new();\n\n    let total: usize = initial_stones.iter()\n        .map(|&stone| {\n            count_stones_recursive(stone, blinks, &mut memo)\n        })\n        .sum();\n\n    println!(\"Total stones after {} blinks: {}\", blinks, total);\n\n    Ok(())\n}",
        "caretPosition": {
          "row": 120,
          "col": 2
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "Again, the naive solution would need to store and process an exponentially growing number of stones. With 75 blinks, we'd need to handle over 218 trillion stones in memory! You'd need some serious hardware to do that!",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}\n\npub fn run_part_two() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stones: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n    let blinks = 75;\n\n    let mut memo = HashMap::new();\n\n    let total: usize = initial_stones.iter()\n        .map(|&stone| {\n            count_stones_recursive(stone, blinks, &mut memo)\n        })\n        .sum();\n\n    println!(\"Total stones after {} blinks: {}\", blinks, total);\n\n    Ok(())\n}",
        "caretPosition": {
          "row": 120,
          "col": 2
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "But our memoized solution just needs to store the count for each unique combination of stone value and remaining blinks. This dramatically reduces both memory usage and computation time.",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}\n\npub fn run_part_two() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stones: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n    let blinks = 75;\n\n    let mut memo = HashMap::new();\n\n    let total: usize = initial_stones.iter()\n        .map(|&stone| {\n            count_stones_recursive(stone, blinks, &mut memo)\n        })\n        .sum();\n\n    println!(\"Total stones after {} blinks: {}\", blinks, total);\n\n    Ok(())\n}",
        "caretPosition": {
          "row": 120,
          "col": 2
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "This optimization technique is particularly powerful because it takes advantage of the problem's structure - the fact that any given stone will always produce the same result after a certain number of blinks.",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}\n\npub fn run_part_two() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stones: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n    let blinks = 75;\n\n    let mut memo = HashMap::new();\n\n    let total: usize = initial_stones.iter()\n        .map(|&stone| {\n            count_stones_recursive(stone, blinks, &mut memo)\n        })\n        .sum();\n\n    println!(\"Total stones after {} blinks: {}\", blinks, total);\n\n    Ok(())\n}",
        "caretPosition": {
          "row": 120,
          "col": 2
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  },
  {
    "html": "\n    <div style=\"display: flex; flex-direction: column; height: 100vh; position: relative;\">\n      <!-- Main IDE Area -->\n      <div style=\"flex: 1; display: flex;\">\n        <!-- File Explorer -->\n        <div style=\"width: 200px; border: 1px solid black; padding: 5px; overflow: auto;\">\n          <ul style='list-style: none; padding-left: 10px; margin: 0;'><li style=\"margin: 2px 0;\">main.rs</li></ul>\n        </div>\n        <!-- Editor Area -->\n        <div style=\"flex: 1; border: 1px solid black; display: flex; flex-direction: column; position: relative;\">\n          \n    <div id=\"editor-area\" style=\"flex: 1; display: flex; flex-direction: column; position: relative;\">\n      <!-- Editor Tabs -->\n      <div id=\"editor-tabs\" style=\"height: 30px; border-bottom: 1px solid black; overflow-x: auto; padding: 5px;\">\n        \n      <div style=\"\n          padding: 2px 5px;\n          border: 1px solid black;\n          margin-right: 5px;\n          background: #ddd;\n          display: inline-block;\">\n        main.rs <span style=\"color: red;\">x</span>\n      </div>\n      </div>\n      <!-- Monaco editor will be injected here -->\n      <div id=\"monaco-editor-container\" style=\"flex: 1;\"></div>\n    </div>\n  \n        </div>\n      </div>\n      <!-- Terminal Area -->\n      <div style=\"height: 150px; border: 1px solid black; padding: 5px; overflow: auto; font-family: monospace;\">\n        <div style=\"font-weight: bold;\">codevideo &gt;</div>\n        <pre style=\"margin:0;\"><code class=\"language-javascript\"></code></pre>\n      </div>\n      <!-- Mouse Pointer SVG -->\n      \n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" style=\"position: absolute; left: -2px; top: -2px; pointer-events: none; transform: scale(0.8); z-index: 1000;\">\n      <path d=\"M 0,0 L 0,20 L 4.5,15.5 L 8.75,23 L 11,22 L 6.75,15 L 13.75,15 Z\" fill=\"black\" stroke=\"white\" stroke-width=\"1.5\" stroke-linejoin=\"round\"></path>\n    </svg>\n  \n    </div>\n  ",
    "speak": "And that wraps up our exploration this elegant solution in Rust! Thanks for watching - I hope this helped demonstrate the power of careful algorithmic choices and how you can implement them in Rust.",
    "editors": [
      {
        "filename": "main.rs",
        "content": "use std::collections::HashMap;\nuse std::fs::File;\nuse std::io::{self, BufRead, BufReader};\nuse std::path::Path;\n\ntype MemoKey = (i64, usize);  // (stone_value, blinks_remaining)\ntype MemoMap = HashMap<MemoKey, usize>;\n\nfn read_lines_as_int_arrays<P>(filename: P, sep: &str) -> io::Result<Vec<Vec<i32>>>\nwhere\n    P: AsRef<Path>,\n{\n    let file = File::open(filename)?;\n    let reader = BufReader::new(file);\n    let lines: Vec<Result<String, io::Error>> = reader.lines().collect();\n    let mut int_arrays: Vec<Vec<i32>> = Vec::new();\n    // split each line by the passed in sep and parse each element as an integer\n    for line in lines {\n        let line: String = line?;\n        let int_array: Vec<i32> = line.split(sep).map(|x| x.parse::<i32>().unwrap()).collect();\n        int_arrays.push(int_array);\n    }\n    Ok(int_arrays)\n}\n\nfn main() {\n    run_part_one();\n}\n\n\n\n\n// First, let's implement a naive solution for Part 1\nfn execute_blink(stone_engravings: Vec<i64>) -> Vec<i64> {\n    let mut new_stones = Vec::new();\n\n    for stone in stone_engravings {\n        if stone == 0 {\n            // Rule 1: stone = 0 -> replaced by stone marked 1\n            new_stones.push(1);\n        } else {\n            let stone_str = stone.to_string();\n            let stone_len = stone_str.len();\n\n            if stone_len % 2 == 0 {\n                // Rule 2: split into two stones\n                let half = stone_len / 2;\n                let left_stone = stone_str[0..half].parse::<i64>().unwrap();\n                let right_stone = stone_str[half..].parse::<i64>().unwrap();\n\n                new_stones.push(left_stone);\n                new_stones.push(right_stone);\n            } else {\n                // Rule 3: multiply by 2024\n                new_stones.push(stone * 2024);\n            }\n        }\n    }\n\n    new_stones\n}\n\npub fn run_part_one() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stone_engravings: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n\n    let mut stone_engravings = initial_stone_engravings.clone();\n    for _ in 0..25 {\n        stone_engravings = execute_blink(stone_engravings);\n    }\n //   println!(\"Count of stones after 25 blinks: {}\", stone_engravings.len());\n    run_part_two();\n    Ok(())\n}\nfn count_stones_recursive(stone: i64, blinks: usize, memo: &mut MemoMap) -> usize {\n    if blinks == 0 { return 1; }\n\n    let key = (stone, blinks);\n    if let Some(&count) = memo.get(&key) { return count; }\n\n    let result = if stone == 0 {\n        count_stones_recursive(1, blinks - 1, memo)\n    } else {\n        let digit_count = stone.to_string().len();\n        if digit_count % 2 == 0 {\n            let stone_str = stone.to_string();\n            let half = digit_count / 2;\n            let left = stone_str[..half].parse::<i64>().unwrap();\n            let right = stone_str[half..].parse::<i64>().unwrap();\n\n            count_stones_recursive(left, blinks - 1, memo) +\n            count_stones_recursive(right, blinks - 1, memo)\n        } else {\n            count_stones_recursive(stone * 2024, blinks - 1, memo)\n        }\n    };\n\n    memo.insert(key, result);\n    result\n}\n\npub fn run_part_two() -> std::io::Result<()> {\n    let input = read_lines_as_int_arrays(\"src/day_11/input.txt\", \"\")?;\n\n    let initial_stones: Vec<i64> = input[0].iter().map(|&x| x as i64).collect();\n    let blinks = 75;\n\n    let mut memo = HashMap::new();\n\n    let total: usize = initial_stones.iter()\n        .map(|&stone| {\n            count_stones_recursive(stone, blinks, &mut memo)\n        })\n        .sum();\n\n    println!(\"Total stones after {} blinks: {}\", blinks, total);\n\n    Ok(())\n}",
        "caretPosition": {
          "row": 120,
          "col": 2
        },
        "highlightCoordinates": null,
        "isSaved": false
      }
    ]
  }
]